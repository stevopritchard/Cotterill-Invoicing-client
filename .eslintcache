[{"/Users/stephenpritchard/Web Development/Cotterill-Invoicing/Cotterill-Invoicing-client/src/index.js":"1","/Users/stephenpritchard/Web Development/Cotterill-Invoicing/Cotterill-Invoicing-client/src/App.js":"2","/Users/stephenpritchard/Web Development/Cotterill-Invoicing/Cotterill-Invoicing-client/src/reportWebVitals.js":"3","/Users/stephenpritchard/Web Development/Cotterill-Invoicing/Cotterill-Invoicing-client/src/Containers/TextDetection/TextDetection.js":"4","/Users/stephenpritchard/Web Development/Cotterill-Invoicing/Cotterill-Invoicing-client/src/Components/Tables/POList.js":"5","/Users/stephenpritchard/Web Development/Cotterill-Invoicing/Cotterill-Invoicing-client/src/Components/Dropzone/Dropzone.js":"6"},{"size":519,"mtime":1618057490876,"results":"7","hashOfConfig":"8"},{"size":7843,"mtime":1625761850303,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1610117449064,"results":"10","hashOfConfig":"8"},{"size":3635,"mtime":1625661138619,"results":"11","hashOfConfig":"8"},{"size":7404,"mtime":1625130758845,"results":"12","hashOfConfig":"8"},{"size":919,"mtime":1621525815948,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1kf8zob",{"filePath":"17","messages":"18","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"/Users/stephenpritchard/Web Development/Cotterill-Invoicing/Cotterill-Invoicing-client/src/index.js",[],["28","29"],"/Users/stephenpritchard/Web Development/Cotterill-Invoicing/Cotterill-Invoicing-client/src/App.js",["30","31","32"],"/Users/stephenpritchard/Web Development/Cotterill-Invoicing/Cotterill-Invoicing-client/src/reportWebVitals.js",[],"/Users/stephenpritchard/Web Development/Cotterill-Invoicing/Cotterill-Invoicing-client/src/Containers/TextDetection/TextDetection.js",[],"/Users/stephenpritchard/Web Development/Cotterill-Invoicing/Cotterill-Invoicing-client/src/Components/Tables/POList.js",["33"],"import React, { useState, useRef } from 'react';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport TextField from '@material-ui/core/TextField'\n\nimport Modal from '@material-ui/core/Modal'\nimport Dialog from '@material-ui/core/Dialog'\n\nimport Button from '@material-ui/core/Button'\n\nfunction rand() {\n    return Math.round(Math.random() * 20) - 10;\n}\n  \nfunction getModalStyle() {\n    const top = 50 + rand();\n    const left = 50 + rand();\n  \n    return {\n      top: `${top}%`,\n      left: `${left}%`,\n      transform: `translate(-${top}%, -${left}%)`,\n    };\n}\n\nconst useStyles = makeStyles((theme) => ({\n    container: {\n        marginLeft: 10,\n        marginRight: 10,\n        maxHeight: 'calc(100vh - 150px)',\n        height: '100%',\n    },\n    paper: {\n      position: 'absolute',\n      width: 400,\n      backgroundColor: theme.palette.background.paper,\n      border: '2px solid #000',\n      boxShadow: theme.shadows[5],\n      padding: theme.spacing(2, 4, 3),\n    },\n}));\n\nconst StyledTableCell = withStyles((theme) => ({\n    head: {\n    //   backgroundColor: theme.palette.common.black,\n    //   color: theme.palette.common.white,\n    },\n    body: {\n      fontSize: 14,\n    },\n  \n  }))(TableCell);\n  \nconst StyledTableRow = withStyles((theme) => ({\nroot: { \n    '&:nth-ot-type(odd)': {\n    backgroundColor: theme.palette.action.hover,\n    },\n},\n}))(TableRow);\n\n\nexport default function POList({invoices, setJson, searchBP, setInvoices, checkDB}) {\n    const [modalStyle] = useState(getModalStyle);\n    const [open, setOpen] = useState(false);\n\n    const modalRefs = useRef([])\n    \n    if(modalRefs.current !== invoices.length) {\n        modalRefs.current = Array(invoices.length).fill().map((_, i) => \n            modalRefs.current[i] = \"\"\n        )\n    }\n\n    const handleOpen = () => {\n        setOpen(true);\n    };\n    const handleClose = () => {\n        setOpen(false);\n    };\n      \n    const handleChange = (i, e) => {\n        modalRefs.current[i] = e.target.value\n    }\n\n    const replaceOrderId = (i) => {\n        searchBP(modalRefs.current[i])\n        .then(\n            response => {\n                if (response.id) {\n                    let newArr = [...invoices]\n                    newArr[i].validNumber = response.id\n                    setInvoices(newArr)\n                    handleClose()\n                }\n            }\n        )\n    }\n\n    const body = (key) => {\n        return (\n            <div style={modalStyle} className={classes.paper}>\n              <h2 id=\"simple-modal-title\">Try another PO number</h2>\n              <p id=\"simple-modal-description\">\n                There wasn't a PO number available in your document.\n              </p>\n                <TextField \n                    onChange={handleChange.bind(this, key)}\n                />\n                <Button onClick={() => replaceOrderId(key)}>Search BP</Button>\n            </div>\n\n        )\n    }\n    \n    const classes = useStyles()\n\n    return (\n        <TableContainer component={Paper} className={classes.container}>\n            <Table stickyHeader aria-label=\"sticky table\">\n                <TableHead>\n                    <TableRow>\n                        <StyledTableCell>Doc Name</StyledTableCell>\n                        <StyledTableCell>Date</StyledTableCell>\n                        <StyledTableCell>PO Number</StyledTableCell>\n                        <StyledTableCell>Status</StyledTableCell>\n                        <StyledTableCell>Options</StyledTableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {\n                        invoices ?\n                        invoices.map((invoice, index) => {\n                            return (\n                                <StyledTableRow key={index}>\n                                    <StyledTableCell>\n                                        <TextField\n                                            value={invoice.name}\n                                        >\n                                        </TextField>\n                                    </StyledTableCell>\n                                    <StyledTableCell>\n                                        <TextField\n                                            value={invoice.date}\n                                        >\n                                        </TextField>\n                                    </StyledTableCell>\n                                    <StyledTableCell>\n                                        <TextField\n                                            value={invoice.validNumber}\n                                        >\n                                        </TextField>\n                                    </StyledTableCell>\n                                    <StyledTableCell>\n                                        {\n                                            invoice.validNumber ?\n                                            \"Matched\"\n                                            :\n                                            \"No Match\"\n                                        }\n                                    </StyledTableCell>\n                                    <StyledTableCell>\n                                        {\n                                            invoice.validNumber ? invoice.updated === true ? \"Record already updated\" : \"Ready to send to BP...\"\n                                            :\n                                            <div>\n                                                <Button type=\"button\" onClick={handleOpen}>Review and match...</Button>  \n                                                <Modal\n                                                    open={open}\n                                                    onClose={handleClose}\n                                                    aria-labelledby=\"simple-modal-title\"\n                                                    aria-describedby=\"simple-modal-description\"\n                                                    >\n                                                    {body(index)}\n                                                </Modal>\n                                            </div>\n                                        }\n                                    </StyledTableCell>\n                                </StyledTableRow>\n                            )\n                        })\n                        :\n                        // <StyledTableRow>\n                        //     <StyledTableCell></StyledTableCell>\n                        //     <StyledTableCell></StyledTableCell>\n                        //     <StyledTableCell></StyledTableCell>\n                        //     <StyledTableCell></StyledTableCell>\n                        //     <StyledTableCell></StyledTableCell>\n                        // </StyledTableRow>\n                        <div></div>\n                    }\n                </TableBody>\n            </Table>\n        </TableContainer>\n    )\n}","/Users/stephenpritchard/Web Development/Cotterill-Invoicing/Cotterill-Invoicing-client/src/Components/Dropzone/Dropzone.js",[],{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","severity":1,"message":"39","line":90,"column":9,"nodeType":"40","messageId":"41","endLine":90,"endColumn":26},{"ruleId":"42","severity":1,"message":"43","line":221,"column":7,"nodeType":"44","messageId":"45","endLine":222,"endColumn":22},{"ruleId":"38","severity":1,"message":"46","line":226,"column":10,"nodeType":"40","messageId":"41","endLine":226,"endColumn":15},{"ruleId":"38","severity":1,"message":"47","line":13,"column":8,"nodeType":"40","messageId":"41","endLine":13,"endColumn":14},"no-native-reassign",["48"],"no-negated-in-lhs",["49"],"no-unused-vars","'handleThemeChange' is assigned a value but never used.","Identifier","unusedVar","no-fallthrough","Expected a 'break' statement before 'default'.","SwitchCase","default","'state' is assigned a value but never used.","'Dialog' is defined but never used.","no-global-assign","no-unsafe-negation"]