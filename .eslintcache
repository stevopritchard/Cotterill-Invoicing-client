[{"/Users/stephenpritchard/Web Development/Cotterill-Invoicing/Cotterill-Invoicing-client/src/index.js":"1","/Users/stephenpritchard/Web Development/Cotterill-Invoicing/Cotterill-Invoicing-client/src/App.js":"2","/Users/stephenpritchard/Web Development/Cotterill-Invoicing/Cotterill-Invoicing-client/src/reportWebVitals.js":"3","/Users/stephenpritchard/Web Development/Cotterill-Invoicing/Cotterill-Invoicing-client/src/Containers/TextDetection/TextDetection.js":"4","/Users/stephenpritchard/Web Development/Cotterill-Invoicing/Cotterill-Invoicing-client/src/Components/Tables/POList.js":"5","/Users/stephenpritchard/Web Development/Cotterill-Invoicing/Cotterill-Invoicing-client/src/Components/Dropzone/Dropzone.js":"6"},{"size":519,"mtime":1618057490876,"results":"7","hashOfConfig":"8"},{"size":7720,"mtime":1624635629623,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1610117449064,"results":"10","hashOfConfig":"8"},{"size":3595,"mtime":1625218146969,"results":"11","hashOfConfig":"8"},{"size":7404,"mtime":1625130758845,"results":"12","hashOfConfig":"8"},{"size":919,"mtime":1621525815948,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1kf8zob",{"filePath":"17","messages":"18","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"/Users/stephenpritchard/Web Development/Cotterill-Invoicing/Cotterill-Invoicing-client/src/index.js",[],["29","30"],"/Users/stephenpritchard/Web Development/Cotterill-Invoicing/Cotterill-Invoicing-client/src/App.js",["31","32","33"],"import React, { useCallback, useEffect, useReducer, useRef, useState }from 'react';\nimport { makeStyles } from '@material-ui/core/styles'\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button'\nimport TextDetection from './Containers/TextDetection/TextDetection';\nimport { green } from '@material-ui/core/colors'\nimport { BottomNavigation } from '@material-ui/core';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Snackbar from '@material-ui/core/Snackbar';\n\nimport { createMuiTheme , ThemeProvider } from '@material-ui/core/styles'\nimport {\n  orange,\n  lightBlue,\n  deepPurple,\n  deepOrange\n} from \"@material-ui/core/colors\";\nimport POList from './Components/Tables/POList';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    minHeight: '100vh',\n    flexDirection: 'column',\n    // justifyContent: 'space-between',\n  },\n  mainArea:{\n    display: 'flex',\n    flexDirection: 'column',\n    marginTop: 35,\n    // height: 'calc(100vh-35px)',\n    overflow: 'auto',\n  },\n  container: {\n    paddingTop: theme.spacing(4),\n    paddingBottom: theme.spacing(4),\n    display: 'flex',\n    justifyContent: 'center',\n  },\n  lowerArea: {\n    display: 'flex',\n    justifyContent: 'center'\n  },\n  progress: {\n    width: '100%',\n    '& > * + *': {\n      marginTop: theme.spacing(2),\n    }\n  },\n  footer: {\n    width: '100%',\n    position: 'fixed',\n    bottom: 0,\n  }\n}))\n\nexport default function App() {\n  const [darkState, setDarkState ] = useState(false);\n  const [invoices, setInvoices] = useState([]);\n  const [open, setOpen ] = useState() \n  const [json, setJson] = useState({})\n  const [searchStatus, setStatus] = useState(\"fulfilled\")\n  const snackText = useRef()\n\n  useEffect(() => {\n    console.log(json)\n  }, [json])\n\n  const classes = useStyles()\n\n  const palletType = darkState ? \"dark\" : \"light\";\n  const mainPrimaryColor = darkState ? orange[500] : lightBlue[500];\n  const mainSecondaryColor = darkState ? deepOrange[900] : deepPurple[500];\n\n  const darkTheme = createMuiTheme({\n    palette: {\n      type: palletType,\n    },\n    primary: {\n      main: mainPrimaryColor\n    },\n    secondary: {\n      main: mainSecondaryColor\n    },\n    sendToBP: {\n      palette: green\n    }\n  });\n\n  const handleThemeChange = () => {\n    setDarkState(!darkState)\n  };\n\n  function clearText() {\n    // setInvoices([{\n    //   name: invoices[0].originalname || '',\n    //   purchaseOrders: [],\n    //   validNumber: '',\n    //   date: '',\n    // }])\n    setInvoices([])\n  }\n\n  async function searchBP (orderNumber) {\n    let findOrder = await fetch('/queryBp', {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      },\n      body: JSON.stringify({orderId: orderNumber})\n    })\n    let foundOrder = await findOrder.json()\n    try {\n      if (foundOrder !== null) {\n        return foundOrder\n      } \n      // else {\n      //   throw new Error(`Could not find matching order for ref ${orderNumber}`)\n      // }\n    }\n    catch (err) {\n      console.log(err)\n    }\n  }\n\n  //above function wrapped in a useCallback hook\n  const checkDB = useCallback(\n    async (invoiceNumber) => {\n      const checkInvoice = await fetch('/queryInvoice', {\n        method: \"post\",\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({validNumber: invoiceNumber})\n      })\n      const checkComplete = await checkInvoice.json()\n      console.log(checkComplete)\n      try {\n        if (checkComplete.length === 1) {\n          if('validNumber' in checkComplete[0] && checkComplete[0].validNumber === parseInt(invoiceNumber)) {\n            return true \n          } else {\n            return false\n          }\n        } else {\n          throw new Error(`${invoiceNumber} is not a valid PO number`)\n        }\n      } catch (err) {\n        console.log(err)\n      }\n    },\n    []\n  )\n\n  const handleOpen = (isOpen, response) => {\n    snackText.current = response\n    setOpen(isOpen)\n  }\n  const handleClose = () => {\n    setOpen(false)\n  }\n\n  const writeToFile = () => {\n    invoices.forEach(async (invoice) => {\n      let matchedNumbers = await checkDB(invoice.validNumber)\n      console.log(matchedNumbers)\n      if (!matchedNumbers && invoice.validNumber) {\n        const response = await fetch('http://localhost:5000/writeInvoice', {\n          method: \"post\",\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(invoice)\n        })\n        const body = await response.json()\n        invoice.updated = true\n        return body\n      }\n    })\n    let checkAllUpdated = invoices.every((invoice) => {\n      return invoice.updated === true\n    })\n    if (checkAllUpdated) {\n      handleOpen(true, `All documents updated successfully.`)\n    } else {\n      handleOpen(true, `Some records could not be updated.`)\n    }\n  }\n\n  function validateNum(invoice) {\n    return Promise.all(invoice.purchaseOrders.map(purchaseOrder => {\n      return searchBP(purchaseOrder)\n    })).then(validatedArr => {\n      let validatedNum = validatedArr.filter((num) => {\n        return num !== undefined\n      })\n      if (validatedNum.length > 0) {\n        invoice.validNumber = validatedNum[0].id\n      }\n      return invoice\n    })\n  }\n\n  //changes the above hook to useReducer\n  const reducer = (state, action) => {\n    switch(action.type) {\n      case \"searchBP\": {\n        Promise.all(action.data.map((invoice) => {\n          return validateNum(invoice)\n        })).then((valArr) => {\n          let newArr = [...valArr]\n          valArr.map(async (invoice, index) => {\n            checkDB(invoice.validNumber).then((alreadySaved) => {\n              newArr[index].updated = alreadySaved\n            })\n          })\n          setInvoices(newArr)\n        })\n      }\n      default:\n        return state;\n    }\n  }\n\n  const [state, dispatch] = useReducer(reducer, [])\n\n\n  return (\n    <ThemeProvider theme={darkTheme}>\n      <div className={classes.root}>\n        <Grid>\n          <TextDetection \n            keyDataToParent={dispatch} \n            clearText={clearText}\n            handleOpen={handleOpen}\n            setStatus={setStatus}\n          />\n        </Grid>\n        <main className={classes.mainArea}>\n          <Grid container spacing={3} className={classes.container}>\n            <Grid item sm={1}/>\n            <Grid item sm={10}>\n              <Grid container >\n                <POList \n                  invoices={invoices}\n                  setJson={setJson}\n                  searchBP={searchBP}\n                  setInvoices={setInvoices}\n                  checkDB={checkDB}\n                />\n              </Grid>\n            </Grid>\n            <Grid item sm={1}/>\n          </Grid>\n          <Grid item sm={12} className={classes.lowerArea}>\n            <Snackbar \n              anchorOrigin={{\n                vertical: 'bottom',\n                horizontal: 'center'\n              }}\n              open={open}\n              autoHideDuration={6000}\n              onClose={handleClose}\n              message={snackText.current}\n            >\n            </ Snackbar>\n            <Button variant=\"contained\" type=\"button\" disableElevation onClick={() => writeToFile()}>Send to BrightPearl</Button>\n          </Grid>\n        </main>\n        <Grid item sm={12} className={classes.footer} >\n          <BottomNavigation>\n            {searchStatus === \"pending\" ? \n              <div className={classes.progress}>\n                <LinearProgress /> \n              </div>\n              : \n              null \n            }\n          </BottomNavigation>\n        </Grid>\n      </div>\n    </ThemeProvider>\n  );\n}\n\n","/Users/stephenpritchard/Web Development/Cotterill-Invoicing/Cotterill-Invoicing-client/src/reportWebVitals.js",[],"/Users/stephenpritchard/Web Development/Cotterill-Invoicing/Cotterill-Invoicing-client/src/Containers/TextDetection/TextDetection.js",["34"],"/Users/stephenpritchard/Web Development/Cotterill-Invoicing/Cotterill-Invoicing-client/src/Components/Tables/POList.js",["35"],"import React, { useState, useRef } from 'react';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport TextField from '@material-ui/core/TextField'\n\nimport Modal from '@material-ui/core/Modal'\nimport Dialog from '@material-ui/core/Dialog'\n\nimport Button from '@material-ui/core/Button'\n\nfunction rand() {\n    return Math.round(Math.random() * 20) - 10;\n}\n  \nfunction getModalStyle() {\n    const top = 50 + rand();\n    const left = 50 + rand();\n  \n    return {\n      top: `${top}%`,\n      left: `${left}%`,\n      transform: `translate(-${top}%, -${left}%)`,\n    };\n}\n\nconst useStyles = makeStyles((theme) => ({\n    container: {\n        marginLeft: 10,\n        marginRight: 10,\n        maxHeight: 'calc(100vh - 150px)',\n        height: '100%',\n    },\n    paper: {\n      position: 'absolute',\n      width: 400,\n      backgroundColor: theme.palette.background.paper,\n      border: '2px solid #000',\n      boxShadow: theme.shadows[5],\n      padding: theme.spacing(2, 4, 3),\n    },\n}));\n\nconst StyledTableCell = withStyles((theme) => ({\n    head: {\n    //   backgroundColor: theme.palette.common.black,\n    //   color: theme.palette.common.white,\n    },\n    body: {\n      fontSize: 14,\n    },\n  \n  }))(TableCell);\n  \nconst StyledTableRow = withStyles((theme) => ({\nroot: { \n    '&:nth-ot-type(odd)': {\n    backgroundColor: theme.palette.action.hover,\n    },\n},\n}))(TableRow);\n\n\nexport default function POList({invoices, setJson, searchBP, setInvoices, checkDB}) {\n    const [modalStyle] = useState(getModalStyle);\n    const [open, setOpen] = useState(false);\n\n    const modalRefs = useRef([])\n    \n    if(modalRefs.current !== invoices.length) {\n        modalRefs.current = Array(invoices.length).fill().map((_, i) => \n            modalRefs.current[i] = \"\"\n        )\n    }\n\n    const handleOpen = () => {\n        setOpen(true);\n    };\n    const handleClose = () => {\n        setOpen(false);\n    };\n      \n    const handleChange = (i, e) => {\n        modalRefs.current[i] = e.target.value\n    }\n\n    const replaceOrderId = (i) => {\n        searchBP(modalRefs.current[i])\n        .then(\n            response => {\n                if (response.id) {\n                    let newArr = [...invoices]\n                    newArr[i].validNumber = response.id\n                    setInvoices(newArr)\n                    handleClose()\n                }\n            }\n        )\n    }\n\n    const body = (key) => {\n        return (\n            <div style={modalStyle} className={classes.paper}>\n              <h2 id=\"simple-modal-title\">Try another PO number</h2>\n              <p id=\"simple-modal-description\">\n                There wasn't a PO number available in your document.\n              </p>\n                <TextField \n                    onChange={handleChange.bind(this, key)}\n                />\n                <Button onClick={() => replaceOrderId(key)}>Search BP</Button>\n            </div>\n\n        )\n    }\n    \n    const classes = useStyles()\n\n    return (\n        <TableContainer component={Paper} className={classes.container}>\n            <Table stickyHeader aria-label=\"sticky table\">\n                <TableHead>\n                    <TableRow>\n                        <StyledTableCell>Doc Name</StyledTableCell>\n                        <StyledTableCell>Date</StyledTableCell>\n                        <StyledTableCell>PO Number</StyledTableCell>\n                        <StyledTableCell>Status</StyledTableCell>\n                        <StyledTableCell>Options</StyledTableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {\n                        invoices ?\n                        invoices.map((invoice, index) => {\n                            return (\n                                <StyledTableRow key={index}>\n                                    <StyledTableCell>\n                                        <TextField\n                                            value={invoice.name}\n                                        >\n                                        </TextField>\n                                    </StyledTableCell>\n                                    <StyledTableCell>\n                                        <TextField\n                                            value={invoice.date}\n                                        >\n                                        </TextField>\n                                    </StyledTableCell>\n                                    <StyledTableCell>\n                                        <TextField\n                                            value={invoice.validNumber}\n                                        >\n                                        </TextField>\n                                    </StyledTableCell>\n                                    <StyledTableCell>\n                                        {\n                                            invoice.validNumber ?\n                                            \"Matched\"\n                                            :\n                                            \"No Match\"\n                                        }\n                                    </StyledTableCell>\n                                    <StyledTableCell>\n                                        {\n                                            invoice.validNumber ? invoice.updated === true ? \"Record already updated\" : \"Ready to send to BP...\"\n                                            :\n                                            <div>\n                                                <Button type=\"button\" onClick={handleOpen}>Review and match...</Button>  \n                                                <Modal\n                                                    open={open}\n                                                    onClose={handleClose}\n                                                    aria-labelledby=\"simple-modal-title\"\n                                                    aria-describedby=\"simple-modal-description\"\n                                                    >\n                                                    {body(index)}\n                                                </Modal>\n                                            </div>\n                                        }\n                                    </StyledTableCell>\n                                </StyledTableRow>\n                            )\n                        })\n                        :\n                        // <StyledTableRow>\n                        //     <StyledTableCell></StyledTableCell>\n                        //     <StyledTableCell></StyledTableCell>\n                        //     <StyledTableCell></StyledTableCell>\n                        //     <StyledTableCell></StyledTableCell>\n                        //     <StyledTableCell></StyledTableCell>\n                        // </StyledTableRow>\n                        <div></div>\n                    }\n                </TableBody>\n            </Table>\n        </TableContainer>\n    )\n}","/Users/stephenpritchard/Web Development/Cotterill-Invoicing/Cotterill-Invoicing-client/src/Components/Dropzone/Dropzone.js",[],{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","severity":1,"message":"41","line":90,"column":9,"nodeType":"42","messageId":"43","endLine":90,"endColumn":26},{"ruleId":"44","severity":1,"message":"45","line":221,"column":7,"nodeType":"46","messageId":"47","endLine":222,"endColumn":22},{"ruleId":"40","severity":1,"message":"48","line":226,"column":10,"nodeType":"42","messageId":"43","endLine":226,"endColumn":15},{"ruleId":"40","severity":1,"message":"49","line":34,"column":7,"nodeType":"42","messageId":"43","endLine":34,"endColumn":16},{"ruleId":"40","severity":1,"message":"50","line":13,"column":8,"nodeType":"42","messageId":"43","endLine":13,"endColumn":14},"no-native-reassign",["51"],"no-negated-in-lhs",["52"],"no-unused-vars","'handleThemeChange' is assigned a value but never used.","Identifier","unusedVar","no-fallthrough","Expected a 'break' statement before 'default'.","SwitchCase","default","'state' is assigned a value but never used.","'dummyData' is assigned a value but never used.","'Dialog' is defined but never used.","no-global-assign","no-unsafe-negation"]