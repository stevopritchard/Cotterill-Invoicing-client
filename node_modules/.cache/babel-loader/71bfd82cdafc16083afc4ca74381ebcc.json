{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/stephenpritchard/Web Development/ocr-testing-app/ocr-client/src/Containers/TextDetection/TextDetection.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Grid, Container, Card, Button } from '@material-ui/core';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Dropzone from '../../Components/Dropzone/Dropzone';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n    flexGrow: 1,\n    margin: theme.spacing(1)\n  },\n  dropzone: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\"\n  },\n  dropzoneCard: {// marginBottom: 40,\n  },\n  buttonArea: {\n    display: 'flex',\n    justifyContent: 'center'\n  },\n  toolbarButtons: {\n    display: 'flex',\n    marginLeft: 'auto'\n  }\n}));\n\nfunction TextDetection({\n  keyDataToParent,\n  clearText,\n  handleOpen,\n  setStatus\n}) {\n  _s();\n\n  const classes = useStyles();\n  var dummyData = [{\n    name: 'Naylor 81091331 .jpg',\n    purchaseOrders: ['146499', '342010'],\n    date: '19/02/2021',\n    updated: false\n  }, {\n    name: 'Eccles 61275.jpg',\n    purchaseOrders: ['146865'],\n    date: '16/02/2021',\n    updated: false\n  }, {\n    name: 'no-po.jpg',\n    purchaseOrders: ['999999'],\n    date: '01/01/2021',\n    updated: false\n  }];\n\n  const uploadImage = async images => {\n    console.log(images);\n    setStatus(\"pending\");\n    var formData = new FormData();\n    images.forEach(image => {\n      if (image.path.split('.').pop() === 'jpg' || image.path.split('.').pop() === 'png') {\n        formData.append('photo', image);\n      } else {\n        handleOpen(true, 'One or more files is of an invalid format.');\n        return;\n      }\n    });\n    console.log(formData);\n    const formResponse = await fetch('/getFormData', {\n      method: \"post\",\n      body: formData\n    });\n    const formResponseData = await formResponse.json();\n    console.log(formResponseData); // const tableResponse = await fetch('/getTableData', {\n    //   method: \"post\",\n    //   body: formData\n    // })\n    // const tableResponseData = await tableResponse.json();\n    // console.log(tableResponseData)\n\n    keyDataToParent(Object.values(formResponseData)); // formResponseData.purchaseOrders.forEach((number) => searchBP(number))\n\n    setStatus(\"fulfilled\");\n  };\n\n  return (\n    /*#__PURE__*/\n    // <Grid className={classes.root}>\n    _jsxDEV(Toolbar, {\n      className: classes.root,\n      variant: \"dense\",\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 5,\n        children: \"Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 3,\n        className: classes.dropzone,\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          variant: \"outlined\",\n          style: {\n            border: '2px dashed gray'\n          },\n          className: classes.dropzoneCard,\n          children: /*#__PURE__*/_jsxDEV(Dropzone, {\n            uploadImage: uploadImage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 4,\n        className: classes.toolbarButtons,\n        children: [/*#__PURE__*/_jsxDEV(Container, {\n          className: classes.buttonArea,\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"default\",\n            type: \"button\",\n            disableElevation: true,\n            onClick: () => clearText(),\n            children: \"Clear\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Container, {\n          className: classes.buttonArea,\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"outlined\",\n            type: \"button\",\n            disableElevation: true,\n            onClick: () => keyDataToParent(dummyData),\n            children: \"Static\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Container, {\n          className: classes.buttonArea,\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            children: \"Logout\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 5\n    }, this) // </Grid>\n\n  );\n}\n\n_s(TextDetection, \"8g5FPXexvSEOsxdmU7HicukHGqY=\", false, function () {\n  return [useStyles];\n});\n\n_c = TextDetection;\nexport default TextDetection;\n\nvar _c;\n\n$RefreshReg$(_c, \"TextDetection\");","map":{"version":3,"sources":["/Users/stephenpritchard/Web Development/ocr-testing-app/ocr-client/src/Containers/TextDetection/TextDetection.js"],"names":["React","makeStyles","Grid","Container","Card","Button","Toolbar","Dropzone","useStyles","theme","root","display","flexGrow","margin","spacing","dropzone","flexDirection","justifyContent","dropzoneCard","buttonArea","toolbarButtons","marginLeft","TextDetection","keyDataToParent","clearText","handleOpen","setStatus","classes","dummyData","name","purchaseOrders","date","updated","uploadImage","images","console","log","formData","FormData","forEach","image","path","split","pop","append","formResponse","fetch","method","body","formResponseData","json","Object","values","border"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles'\nimport { Grid, Container, Card, Button } from '@material-ui/core';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Dropzone from '../../Components/Dropzone/Dropzone';\n\nconst useStyles = makeStyles((theme) => ({\n  root:{\n    display: 'flex',\n    flexGrow: 1,\n    margin: theme.spacing(1)\n  },\n  dropzone:{\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\"\n  },\n  dropzoneCard: {\n    // marginBottom: 40,\n  },\n  buttonArea: {\n    display: 'flex',\n    justifyContent: 'center',\n  },\n  toolbarButtons: {\n    display: 'flex',\n    marginLeft: 'auto',\n  },\n}));\n\nfunction TextDetection({ keyDataToParent, clearText, handleOpen, setStatus }) {\n  const classes = useStyles()\n\n  var dummyData = [\n    {\n      name: 'Naylor 81091331 .jpg',\n      purchaseOrders: [ '146499', '342010' ],\n      date: '19/02/2021',\n      updated: false\n    },\n    {\n      name: 'Eccles 61275.jpg',\n      purchaseOrders: [ '146865' ],\n      date: '16/02/2021',\n      updated: false\n    },\n    {\n      name: 'no-po.jpg',\n      purchaseOrders: [ '999999' ],\n      date: '01/01/2021',\n      updated: false\n    }\n  ]\n  \n  const uploadImage = async (images) => {\n    console.log(images)\n    setStatus(\"pending\")\n    var formData = new FormData();\n    images.forEach(image => {\n      if (image.path.split('.').pop() === 'jpg' || image.path.split('.').pop() === 'png') {\n        formData.append('photo', image)\n      } else {\n        handleOpen(true, 'One or more files is of an invalid format.')\n        return\n      }\n    })\n    console.log(formData)\n    const formResponse = await fetch('/getFormData', {\n      method: \"post\",\n      body: formData\n    })\n    const formResponseData = await formResponse.json();\n    console.log(formResponseData)\n    // const tableResponse = await fetch('/getTableData', {\n    //   method: \"post\",\n    //   body: formData\n    // })\n\n    // const tableResponseData = await tableResponse.json();\n    // console.log(tableResponseData)\n    keyDataToParent(Object.values(formResponseData))\n    // formResponseData.purchaseOrders.forEach((number) => searchBP(number))\n    setStatus(\"fulfilled\")\n  }\n\n  return (\n    // <Grid className={classes.root}>\n    <Toolbar className={classes.root} variant=\"dense\">\n      <Grid item xs={5}>\n        Dashboard\n      </Grid>\n      <Grid item xs={3} className={classes.dropzone}>\n        <Card \n          variant=\"outlined\" \n          style={{border: '2px dashed gray'}}\n          className={classes.dropzoneCard}\n        >\n          <Dropzone uploadImage = {uploadImage}/>\n        </Card>\n      </Grid>\n      <Grid item xs={4} className={classes.toolbarButtons}>\n        <Container className={classes.buttonArea}>\n          <Button \n            variant=\"contained\"\n            color=\"default\"\n            type=\"button\" \n            disableElevation \n            onClick={() => clearText()}\n          >\n            Clear\n          </Button>\n        </Container>\n        <Container className={classes.buttonArea}>\n          <Button \n            variant=\"outlined\" \n            type=\"button\" \n            disableElevation \n            onClick={() => keyDataToParent(dummyData)}\n          >\n            Static\n          </Button>\n        </Container>\n        <Container className={classes.buttonArea}>\n          <Button\n            variant=\"contained\"\n          >\n            Logout\n          </Button>\n        </Container>\n      </Grid>\n    </Toolbar>\n    // </Grid>\n  );\n}\n\nexport default TextDetection;\n"]},"metadata":{},"sourceType":"module"}